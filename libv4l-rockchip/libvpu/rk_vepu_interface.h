/* Copyright 2014 The Chromium OS Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

/* Rockchip VPU (video processing unit) encoder library module. */

#ifndef LIBVPU_RK_VEPU_INTERFACE_H_
#define LIBVPU_RK_VEPU_INTERFACE_H_

#include <stdint.h>

struct rk_vepu_param {
  uint32_t width; /* video width */
  uint32_t height; /* video height */
  int32_t framerate_numer; /* frame rate */
  int32_t framerate_denom;
  int32_t bitrate; /* bitrate per second */
  uint32_t input_format; /* V4L2 fourcc pixel format */
};

/**
 * Get and initialize an encoder instance with encode parameters.
 *
 * @param param: vpu encoder parameters, see struct rk_vepu_param.
 *
 * @return the encoder instance, will use in other interface.
 */
void *rk_vepu_init(struct rk_vepu_param *param);

/**
 * Deinitialize and destroy the encoder instance.
 *
 * @param enc: the instance generated by rk_vepu_init.
 *
 * @return -1 failure, 0 success.
 */
int rk_vepu_deinit(void *enc);

/**
 * Get configuration for driver to configure the hardware.
 *
 * @param enc: the instance generated by rk_vepu_init.
 * @param num_ctrls: pointer to the number of controls.
 * @param ctrls_ids: pointer to a num_ctrls element array of V4L2 control IDs
 *     corresponding to elements in ctrls.
 * @param ctrls: pointer to a num_ctrls element array of pointers to control
 *     payloads.
 * @param size: pointer to a num_ctrls element array of sizes for each payload
 *     in ctrls.
 *
 * Get a set of control payloads and IDs from library for the plugin to pass as
 * V4L2 controls to the driver. num_ctrls, ctrl_ids, ctrls, and ctrl_size are
 * output. The library owns the memory. But it can only change or free the
 * memory on next rk_vepu_get_config() call or rk_vepu_deinit().
 *
 * @return -1 failure, 0 success.
 */
int rk_vepu_get_config(void *enc, size_t *num_ctrls, uint32_t **ctrl_ids,
                       void ***ctrls, uint32_t **ctrl_size);

/**
 * Update the encoder configuration by previous encoding output.
 *
 * @param enc: the instance generated by rk_vepu_init.
 * @param config: the configuration got from driver by G_EXT_CTRLS. The caller
 *     owns the memory and the encoder library cannot use the buffer after this
 *     function returns.
 * @param size: size of the configuration.
 *
 * @return -1 failure, 0 success.
 */
int rk_vepu_update_config(void *enc, void *config, uint32_t size);

#endif  // LIBVPU_RK_VEPU_INTERFACE_H_

